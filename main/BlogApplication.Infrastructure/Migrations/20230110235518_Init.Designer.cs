// <auto-generated />
using System;
using BlogApplication.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlogApplication.Infrastructure.Migrations
{
    [DbContext(typeof(BlogApplicationContext))]
    [Migration("20230110235518_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogApplication.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Name")
                        .HasColumnType("integer")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7d0bbf0-a1e9-4dbd-845b-f8e751160000"),
                            Name = 0
                        },
                        new
                        {
                            Id = new Guid("b7d0bbf0-a1e9-4dbd-845b-f8e751160001"),
                            Name = 2
                        },
                        new
                        {
                            Id = new Guid("b7d0bbf0-a1e9-4dbd-845b-f8e751160002"),
                            Name = 1
                        });
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Content");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 10, 18, 55, 17, 790, DateTimeKind.Local).AddTicks(2935))
                        .HasColumnName("Publication_date");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ee05129-86e3-4fe3-ac97-23510c79d1f6"),
                            Content = "when an unknown",
                            PostId = new Guid("e97de533-9e22-4944-92bc-bdd799b6c785"),
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fbb")
                        },
                        new
                        {
                            Id = new Guid("3ee05129-86e3-4fe3-ac97-23510c79d1f7"),
                            Content = "when an unknown a.",
                            PostId = new Guid("e97de533-9e22-4944-92bc-bdd799b6c786"),
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fcc")
                        },
                        new
                        {
                            Id = new Guid("3ee05129-86e3-4fe3-ac97-23510c79d1f8"),
                            Content = "when an unknown again",
                            PostId = new Guid("e97de533-9e22-4944-92bc-bdd799b6c787"),
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fdd")
                        });
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Name")
                        .HasColumnType("integer")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Label", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4670c53-544a-40b7-8fc3-e772edd31725"),
                            Name = 0
                        },
                        new
                        {
                            Id = new Guid("f4670c53-544a-40b7-8fc3-e772edd31726"),
                            Name = 1
                        },
                        new
                        {
                            Id = new Guid("f4670c53-544a-40b7-8fc3-e772edd31727"),
                            Name = 2
                        });
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Author");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 10, 18, 55, 17, 789, DateTimeKind.Local).AddTicks(8226))
                        .HasColumnName("Publication_date");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e97de533-9e22-4944-92bc-bdd799b6c785"),
                            Author = "Camila",
                            CategoryId = new Guid("b7d0bbf0-a1e9-4dbd-845b-f8e751160000"),
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            Title = "The new things of technology",
                            UserId = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fbb")
                        },
                        new
                        {
                            Id = new Guid("e97de533-9e22-4944-92bc-bdd799b6c786"),
                            Author = "Santiago",
                            CategoryId = new Guid("b7d0bbf0-a1e9-4dbd-845b-f8e751160001"),
                            Content = "Proin finibus sodales purus, et luctus urna laoreet ullamcorper. Donec vitae dapibus massa. Suspendisse id maximus risus",
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = false,
                            Title = "Clean House Tips",
                            UserId = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fcc")
                        },
                        new
                        {
                            Id = new Guid("e97de533-9e22-4944-92bc-bdd799b6c787"),
                            Author = "Fernando",
                            CategoryId = new Guid("b7d0bbf0-a1e9-4dbd-845b-f8e751160002"),
                            Content = "Fusce iaculis sem nec tellus suscipit congue. Etiam pharetra posuere porta. Mauris semper quam ut sapien pharetra laoreet. Donec ultrices",
                            PublicationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            Title = "New's",
                            UserId = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fdd")
                        });
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.PostLabelPivot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("PostId");

                    b.ToTable("Post_label", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71fca0f-ea8d-428a-a85a-dec6240bbba3"),
                            LabelId = new Guid("f4670c53-544a-40b7-8fc3-e772edd31725"),
                            PostId = new Guid("e97de533-9e22-4944-92bc-bdd799b6c785")
                        },
                        new
                        {
                            Id = new Guid("f71fca0f-ea8d-428a-a85a-dec6240bbba4"),
                            LabelId = new Guid("f4670c53-544a-40b7-8fc3-e772edd31726"),
                            PostId = new Guid("e97de533-9e22-4944-92bc-bdd799b6c786")
                        },
                        new
                        {
                            Id = new Guid("f71fca0f-ea8d-428a-a85a-dec6240bbba5"),
                            LabelId = new Guid("f4670c53-544a-40b7-8fc3-e772edd31727"),
                            PostId = new Guid("e97de533-9e22-4944-92bc-bdd799b6c787")
                        });
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 10, 18, 55, 17, 789, DateTimeKind.Local).AddTicks(3988))
                        .HasColumnName("Creation_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("Nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2023, 1, 10, 18, 55, 17, 789, DateTimeKind.Local).AddTicks(4245))
                        .HasColumnName("Update_date");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fbb"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@mail.com",
                            Name = "John",
                            Nickname = "John23",
                            Password = "123456",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fcc"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fabiana@mail.com",
                            Name = "Fabiana",
                            Nickname = "Fabiana50",
                            Password = "123456",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fdd"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexa@mail.com",
                            Name = "Alexa",
                            Nickname = "Alexa05",
                            Password = "123456",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8dd1b477-0d2b-42ae-bfd3-0de9d74b7fee"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cristina@mail.com",
                            Name = "Cristina",
                            Nickname = "Cristina10",
                            Password = "123456",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BlogApplication.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlogApplication.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Post", b =>
                {
                    b.HasOne("BlogApplication.Domain.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApplication.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.PostLabelPivot", b =>
                {
                    b.HasOne("BlogApplication.Domain.Entities.Label", "Label")
                        .WithMany("LabelPivots")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogApplication.Domain.Entities.Post", "Post")
                        .WithMany("PostPivots")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Label", b =>
                {
                    b.Navigation("LabelPivots");
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostPivots");
                });

            modelBuilder.Entity("BlogApplication.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
